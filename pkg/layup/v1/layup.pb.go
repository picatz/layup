// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: layup/v1/layup.proto

// Layup enables anyone to model relationships between data
// in a graph using "layers" to represent different views
// of the data, and "links" to represent relationships
// between the data.
//
// It is designed to be simple to use, and easy to
// integrate with existing systems.
//
// Some elements may contain a URI which can be used to
// uniquely identify them following the rules of RFC 3986.
// https://datatracker.ietf.org/doc/html/rfc3986#section-3

package layupv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A model is a collection of layers which contain
// nodes and links representing the data in the graph.
type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri        string                     `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Layers     []*Layer                   `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layup_v1_layup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_layup_v1_layup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_layup_v1_layup_proto_rawDescGZIP(), []int{0}
}

func (x *Model) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Model) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Model) GetLayers() []*Layer {
	if x != nil {
		return x.Layers
	}
	return nil
}

// A layer is a collection of nodes and links.
type Layer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes      []*Node                    `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Links      []*Link                    `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
	Dynamic    *bool                      `protobuf:"varint,5,opt,name=dynamic,proto3,oneof" json:"dynamic,omitempty"`
}

func (x *Layer) Reset() {
	*x = Layer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layup_v1_layup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Layer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Layer) ProtoMessage() {}

func (x *Layer) ProtoReflect() protoreflect.Message {
	mi := &file_layup_v1_layup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Layer.ProtoReflect.Descriptor instead.
func (*Layer) Descriptor() ([]byte, []int) {
	return file_layup_v1_layup_proto_rawDescGZIP(), []int{1}
}

func (x *Layer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Layer) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Layer) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Layer) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Layer) GetDynamic() bool {
	if x != nil && x.Dynamic != nil {
		return *x.Dynamic
	}
	return false
}

// A node is a single piece of data in the graph.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layup_v1_layup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_layup_v1_layup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_layup_v1_layup_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// A link is a relationship between two nodes.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Attributes map[string]*structpb.Value `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	From       string                     `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To         string                     `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layup_v1_layup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_layup_v1_layup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_layup_v1_layup_proto_rawDescGZIP(), []int{3}
}

func (x *Link) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Link) GetAttributes() map[string]*structpb.Value {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Link) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Link) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

var File_layup_v1_layup_proto protoreflect.FileDescriptor

var file_layup_v1_layup_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x79, 0x75, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x02, 0x0a, 0x05,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x51, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x9a, 0x01, 0x0a, 0x22, 0x03,
	0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x55, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0x7f, 0xba, 0x48, 0x7c, 0x1a, 0x7a, 0x0a, 0x0e, 0x75, 0x6e, 0x69,
	0x71, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x1b, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x73, 0x1a, 0x4b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x69, 0x64, 0x29, 0x29, 0x22, 0x8c, 0x07, 0x0a, 0x05, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17,
	0xc8, 0x01, 0x01, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30,
	0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x10, 0xba, 0x48, 0x0d, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x88, 0x01, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0xb5, 0x04, 0xba, 0x48, 0xb1, 0x04, 0x1a, 0x83, 0x01, 0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x71,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x29, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x20, 0x49, 0x44, 0x73, 0x1a, 0x47, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65,
	0x28, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x20,
	0x3d, 0x3d, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x29, 0x29, 0x1a, 0x83, 0x01,
	0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x12,
	0x29, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x20,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x49, 0x44, 0x73, 0x1a, 0x47, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6c, 0x69, 0x6e, 0x6b, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x20, 0x6c, 0x69,
	0x6e, 0x6b, 0x2e, 0x69, 0x64, 0x20, 0x3d, 0x3d, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x69,
	0x64, 0x29, 0x29, 0x1a, 0x89, 0x01, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x27, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x47, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6c, 0x69, 0x6e, 0x6b, 0x2c, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6f,
	0x6e, 0x65, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x3d, 0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x69, 0x64, 0x29, 0x29, 0x1a,
	0x96, 0x01, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x6f, 0x12, 0x2b, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61,
	0x76, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x27, 0x74, 0x6f, 0x27, 0x20,
	0x6e, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x58,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6c,
	0x69, 0x6e, 0x6b, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x65, 0x28, 0x6e, 0x6f, 0x64, 0x65, 0x2c,
	0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x20, 0x3d, 0x3d, 0x20, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x69, 0x64, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x74, 0x6f, 0x2e,
	0x69, 0x73, 0x55, 0x72, 0x69, 0x28, 0x29, 0x29, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x22, 0xdb, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17, 0xc8, 0x01,
	0x01, 0x72, 0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39,
	0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xba,
	0x48, 0x0d, 0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd4, 0x03, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x2a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17, 0xc8, 0x01, 0x01, 0x72,
	0x12, 0x32, 0x10, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f,
	0x5d, 0x2a, 0x24, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x61,
	0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0xba, 0x48, 0x0d,
	0x9a, 0x01, 0x0a, 0x22, 0x03, 0xc8, 0x01, 0x01, 0x2a, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x55, 0x0a,
	0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x3a, 0xc2, 0x01, 0xba, 0x48, 0xbe, 0x01, 0x1a, 0xbb, 0x01, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4c, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x27, 0x66, 0x72, 0x6f, 0x6d, 0x27, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x27,
	0x74, 0x6f, 0x27, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x5f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x66,
	0x72, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d, 0x5f, 0x5d, 0x2a, 0x24, 0x27, 0x29, 0x20,
	0x26, 0x26, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74, 0x6f, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x2d,
	0x5f, 0x5d, 0x2a, 0x24, 0x27, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x74,
	0x6f, 0x2e, 0x69, 0x73, 0x55, 0x72, 0x69, 0x28, 0x29, 0x42, 0x85, 0x01, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x2e, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x4c, 0x61, 0x79, 0x75,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x63, 0x61, 0x74, 0x7a, 0x2f, 0x6c, 0x61, 0x79, 0x75,
	0x70, 0x2f, 0x6c, 0x61, 0x79, 0x75, 0x70, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x79, 0x75, 0x70,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x4c, 0x61, 0x79, 0x75, 0x70,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x14, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x4c, 0x61, 0x79, 0x75, 0x70, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layup_v1_layup_proto_rawDescOnce sync.Once
	file_layup_v1_layup_proto_rawDescData = file_layup_v1_layup_proto_rawDesc
)

func file_layup_v1_layup_proto_rawDescGZIP() []byte {
	file_layup_v1_layup_proto_rawDescOnce.Do(func() {
		file_layup_v1_layup_proto_rawDescData = protoimpl.X.CompressGZIP(file_layup_v1_layup_proto_rawDescData)
	})
	return file_layup_v1_layup_proto_rawDescData
}

var file_layup_v1_layup_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_layup_v1_layup_proto_goTypes = []interface{}{
	(*Model)(nil),          // 0: layup.v1.Model
	(*Layer)(nil),          // 1: layup.v1.Layer
	(*Node)(nil),           // 2: layup.v1.Node
	(*Link)(nil),           // 3: layup.v1.Link
	nil,                    // 4: layup.v1.Model.AttributesEntry
	nil,                    // 5: layup.v1.Layer.AttributesEntry
	nil,                    // 6: layup.v1.Node.AttributesEntry
	nil,                    // 7: layup.v1.Link.AttributesEntry
	(*structpb.Value)(nil), // 8: google.protobuf.Value
}
var file_layup_v1_layup_proto_depIdxs = []int32{
	4,  // 0: layup.v1.Model.attributes:type_name -> layup.v1.Model.AttributesEntry
	1,  // 1: layup.v1.Model.layers:type_name -> layup.v1.Layer
	5,  // 2: layup.v1.Layer.attributes:type_name -> layup.v1.Layer.AttributesEntry
	2,  // 3: layup.v1.Layer.nodes:type_name -> layup.v1.Node
	3,  // 4: layup.v1.Layer.links:type_name -> layup.v1.Link
	6,  // 5: layup.v1.Node.attributes:type_name -> layup.v1.Node.AttributesEntry
	7,  // 6: layup.v1.Link.attributes:type_name -> layup.v1.Link.AttributesEntry
	8,  // 7: layup.v1.Model.AttributesEntry.value:type_name -> google.protobuf.Value
	8,  // 8: layup.v1.Layer.AttributesEntry.value:type_name -> google.protobuf.Value
	8,  // 9: layup.v1.Node.AttributesEntry.value:type_name -> google.protobuf.Value
	8,  // 10: layup.v1.Link.AttributesEntry.value:type_name -> google.protobuf.Value
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_layup_v1_layup_proto_init() }
func file_layup_v1_layup_proto_init() {
	if File_layup_v1_layup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layup_v1_layup_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layup_v1_layup_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Layer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layup_v1_layup_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layup_v1_layup_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_layup_v1_layup_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layup_v1_layup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layup_v1_layup_proto_goTypes,
		DependencyIndexes: file_layup_v1_layup_proto_depIdxs,
		MessageInfos:      file_layup_v1_layup_proto_msgTypes,
	}.Build()
	File_layup_v1_layup_proto = out.File
	file_layup_v1_layup_proto_rawDesc = nil
	file_layup_v1_layup_proto_goTypes = nil
	file_layup_v1_layup_proto_depIdxs = nil
}
